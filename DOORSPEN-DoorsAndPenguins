package com.doorspen;

import java.io.*;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        int groupA = 1, groupB = 1;
        int countCase = 0;
        try {
            Scanner scan = new Scanner(System.in);
            System.out.printf("Enter the text file name:\n");
            String name = scan.nextLine();
            FileReader file = new FileReader(name);
            BufferedReader readFile = new BufferedReader(file);

            boolean flag = true;
            String line;
            String[] lineAux;

            while (groupB != 0 && groupA != 0) {
                if (flag) {
                    line = readFile.readLine();
                    lineAux = line.split(" ");
                    groupA = Integer.parseInt(lineAux[0]);
                    groupB = Integer.parseInt(lineAux[1]);
                    flag = false;
                }

                double table[][] = new double[(groupA + groupB) * 4][2];
                double table2[][] = new double[(groupA + groupB) * 4][2];

                for (int j = 0, i = 0; j < groupA + groupB; i += 4, j++) {
                    line = readFile.readLine();
                    lineAux = line.split(" ");
                    table[i][0] = Double.parseDouble(lineAux[0]);
                    table[i][1] = Double.parseDouble(lineAux[1]);
                    table[i + 1][0] = Double.parseDouble(lineAux[2]);
                    table[i + 1][1] = Double.parseDouble(lineAux[3]);
                    table[i + 2][0] = Double.parseDouble(lineAux[2]);
                    table[i + 2][1] = Double.parseDouble(lineAux[1]);
                    table[i + 3][0] = Double.parseDouble(lineAux[0]);
                    table[i + 3][1] = Double.parseDouble(lineAux[3]);

                    table2[i][0] = Double.parseDouble(lineAux[0]) - 0.1;
                    table2[i][1] = Double.parseDouble(lineAux[1]) - 0.1;
                    table2[i + 1][0] = Double.parseDouble(lineAux[2]) + 0.1;
                    table2[i + 1][1] = Double.parseDouble(lineAux[3]) + 0.1;
                    table2[i + 2][0] = Double.parseDouble(lineAux[2]) + 0.1;
                    table2[i + 2][1] = Double.parseDouble(lineAux[1]) - 0.1;
                    table2[i + 3][0] = Double.parseDouble(lineAux[0]) - 0.1;
                    table2[i + 3][1] = Double.parseDouble(lineAux[3]) + 0.1;
                }

                countCase++;

                    if (check(table, table2, (groupA * 4)) == 1) {
                        System.out.println("Case " + countCase + ": It is possible to separate the two groups of vendors.");
                    } else {
                        System.out.println("Case " + countCase + ": It is not possible to separate the two groups of vendors.");
                    }

                    line = readFile.readLine();
                    lineAux = line.split(" ");
                    groupA = Integer.parseInt(lineAux[0]);
                    groupB = Integer.parseInt(lineAux[1]);
            }
            file.close();
        } catch (IOException e) {
            System.err.printf("Error opening: %s.\n", e.getMessage());
        }
    }

    public static int check(double table[][], double table2[][], int groupA) {
        double m = 0;
        boolean groupAup,groupAdown,groupBup,groupBdown,breaktrue;
        for (int i = 0; i < table.length; i++) {
            for (int j = i + 1; j < table.length; j++) {
                if ((table2[j][1] - table2[i][1]) / (table2[j][0] - table2[i][0]) == Double.NaN ||
                        Double.isInfinite((table2[j][1] - table2[i][1]) / (table2[j][0] - table2[i][0])))
                    m = table2[i][0];
                else
                    m = (table2[j][1] - table2[i][1]) / (table2[j][0] - table2[i][0]);

                breaktrue=false;
                groupAdown=false;
                groupAup=false;
                groupBdown=false;
                groupBup=false;

                for(int k = 0; k < table.length; k++) {
                    if(k < groupA) {
                        if (table[k][1] > ((m * table[k][0]) - ((m * table2[j][0]) - table2[j][1]))) {
                            if (groupAdown) {
                                breaktrue=true;
                                break;
                            }
                            groupAup = true;
                        }
                        else if (table[k][1] < ((m * table[k][0]) - ((m * table2[j][0]) - table2[j][1]))) {
                            if (groupAup) {
                                breaktrue=true;
                                break;
                            }
                            groupAdown = true;
                        }
                        else{
                            breaktrue=true;
                            break;
                        }
                    }
                    else {
                        if (table[k][1] < ((m * table[k][0]) - ((m * table2[j][0]) - table2[j][1]))) {
                            if (groupAdown) {
                                breaktrue=true;
                                break;
                            }
                            if (groupBup) {
                                breaktrue=true;
                                break;
                            }
                            groupBdown = true;
                        }
                        else if (table[k][1] > ((m * table[k][0]) - ((m * table2[j][0]) - table2[j][1]))) {
                            if (groupAup) {
                                breaktrue=true;
                                break;
                            }
                            if (groupBdown) {
                                breaktrue=true;
                                break;
                            }
                            groupBup = true;
                        }
                        else{
                            breaktrue=true;
                            break;
                        }
                    }

                }
                if(!breaktrue)return 1;
            }
        }
        return 0;
    }
}
